services:
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - .env
    ports:
      - "${WEB_PORT}:8666"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=8666
      - ORIGIN=${APP_ORIGIN}
      - SERVER_API=http://server:8777/api
      - DEFAULT_USERNAME=${DEFAULT_USERNAME}
      - DEFAULT_PASSWORD=${DEFAULT_PASSWORD}
    depends_on:
      server:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - .env
    ports:
      - "${SERVER_PORT}:8777"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=8777
      - APP_ORIGIN=http://web:8666
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL=${DB_SSL}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:17-alpine
    container_name: db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -p 5432 -U ${DB_USER} -d ${DB_NAME}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
